<!DOCTYPE html><html lang="id"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"><title>Enhanced Push-Up Tracker - Mobile</title><script src="https://cdn.jsdelivr.net/npm/@mediapipe/pose@0.5/pose.js"></script><script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js"></script><script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js"></script><style>* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 10px;
    overflow-x: hidden;
}

body.fullscreen {
    padding: 0;
    background: #000;
}

h1 {
    font-size: 1.8rem;
    margin-bottom: 15px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-align: center;
}

body.fullscreen h1 {
    display: none;
}

#container {
    position: relative;
    width: 100%;
    max-width: 100vw;
    margin: 0 auto;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
}

body.fullscreen #container {
    border-radius: 0;
    box-shadow: none;
    background: none;
    backdrop-filter: none;
    height: 100vh;
}

#video {
    width: 100%;
    height: auto;
    display: block;
    max-height: 50vh;
}

body.fullscreen #video {
    max-height: 100vh;
    height: 100vh;
    object-fit: cover;
}

canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

#fullscreenBtn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 18px;
    cursor: pointer;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

#fullscreenBtn:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
}

#controls {
    display: flex;
    gap: 8px;
    margin: 15px 0;
    flex-wrap: wrap;
    justify-content: center;
    width: 100%;
}

body.fullscreen #controls {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    padding: 10px;
    border-radius: 25px;
    z-index: 1000;
    margin: 0;
}

button {
    padding: 8px 16px;
    font-size: 0.9rem;
    border: none;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    min-width: 80px;
}

#startBtn {
    background: linear-gradient(45deg, #4CAF50, #45a049);
    color: white;
    box-shadow: 0 2px 10px rgba(76, 175, 80, 0.3);
}

#startBtn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.4);
}

#resetBtn {
    background: linear-gradient(45deg, #f44336, #da190b);
    color: white;
    box-shadow: 0 2px 10px rgba(244, 67, 54, 0.3);
}

#resetBtn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(244, 67, 54, 0.4);
}

#pauseBtn {
    background: linear-gradient(45deg, #ff9800, #f57c00);
    color: white;
    box-shadow: 0 2px 10px rgba(255, 152, 0, 0.3);
}

#pauseBtn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(255, 152, 0, 0.4);
}

#stats {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
    margin: 15px 0;
    width: 100%;
    max-width: 400px;
}

body.fullscreen #stats {
    position: fixed;
    top: 20px;
    left: 20px;
    background: rgba(0, 0, 0, 0.8);
    padding: 15px;
    border-radius: 15px;
    z-index: 1000;
    margin: 0;
    max-width: 300px;
}

.stat-card {
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    padding: 12px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

body.fullscreen .stat-card {
    background: rgba(255, 255, 255, 0.1);
    padding: 8px;
}

.stat-label {
    font-size: 0.7rem;
    opacity: 0.8;
    margin-bottom: 4px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #4ecdc4;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
}

body.fullscreen .stat-value {
    font-size: 1.2rem;
}

#countdown {
    font-size: 3rem;
    font-weight: bold;
    color: #ff6b6b;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    margin: 15px 0;
    animation: pulse 1s infinite;
}

body.fullscreen #countdown {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1000;
    font-size: 4rem;
    background: rgba(0, 0, 0, 0.8);
    padding: 20px;
    border-radius: 20px;
}

@keyframes pulse {
    0% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.05);
    }
    100% {
        transform: scale(1);
    }
}

#status {
    font-size: 1rem;
    margin: 10px 0;
    padding: 8px 16px;
    border-radius: 20px;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    text-align: center;
}

body.fullscreen #status {
    position: fixed;
    top: 20px;
    right: 20px;
    margin: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    max-width: 200px;
}

.quality-indicator {
    display: flex;
    align-items: center;
    gap: 8px;
    margin: 10px 0;
    font-size: 0.8rem;
}

body.fullscreen .quality-indicator {
    position: fixed;
    bottom: 100px;
    left: 20px;
    background: rgba(0, 0, 0, 0.8);
    padding: 10px;
    border-radius: 10px;
    z-index: 1000;
    margin: 0;
}

.quality-bar {
    width: 60px;
    height: 6px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
    overflow: hidden;
}

.quality-fill {
    height: 100%;
    background: linear-gradient(90deg, #ff6b6b, #feca57, #48dbfb);
    transition: width 0.3s ease;
}

#settings {
    margin-top: 15px;
    padding: 15px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    backdrop-filter: blur(10px);
    width: 100%;
    max-width: 400px;
}

body.fullscreen #settings {
    display: none;
}

#settings h3 {
    margin-bottom: 15px;
    font-size: 1.1rem;
    text-align: center;
}

.setting-group {
    margin: 12px 0;
    text-align: left;
}

.setting-group label {
    display: block;
    margin-bottom: 6px;
    font-weight: 600;
    font-size: 0.9rem;
}

.setting-group input[type="range"] {
    width: 100%;
    margin: 6px 0;
}

.setting-group input[type="number"] {
    width: 60px;
    padding: 6px;
    border: none;
    border-radius: 6px;
    background: rgba(255, 255, 255, 0.2);
    color: white;
    text-align: center;
    font-size: 0.9rem;
}

.achievement {
    position: fixed;
    top: 20px;
    right: 20px;
    background: linear-gradient(45deg, #f093fb, #f5576c);
    color: white;
    padding: 12px 16px;
    border-radius: 8px;
    font-weight: bold;
    transform: translateX(400px);
    transition: transform 0.3s ease;
    z-index: 1000;
    font-size: 0.9rem;
}

.achievement.show {
    transform: translateX(0);
}

.mobile-toggle {
    position: fixed;
    top: 10px;
    left: 10px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 16px;
    cursor: pointer;
    z-index: 1001;
    display: none;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

body.fullscreen .mobile-toggle {
    display: flex;
}

.mobile-toggle:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
}

.mobile-info {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: rgba(0, 0, 0, 0.8);
    padding: 8px 12px;
    border-radius: 20px;
    font-size: 0.8rem;
    z-index: 1000;
    display: none;
}

body.fullscreen .mobile-info {
    display: block;
}


/* Mobile optimizations */

@media (max-width: 768px) {
    body {
        padding: 5px;
    }
    h1 {
        font-size: 1.5rem;
        margin-bottom: 10px;
    }
    #video {
        max-height: 40vh;
    }
    button {
        padding: 6px 12px;
        font-size: 0.8rem;
        min-width: 70px;
    }
    .stat-value {
        font-size: 1.2rem;
    }
    #countdown {
        font-size: 2.5rem;
    }
    #status {
        font-size: 0.9rem;
        padding: 6px 12px;
    }
    .quality-indicator {
        font-size: 0.7rem;
    }
    .quality-bar {
        width: 50px;
    }
    #settings {
        padding: 12px;
    }
    .setting-group input[type="number"] {
        width: 50px;
        padding: 4px;
        font-size: 0.8rem;
    }
}

@media (max-width: 480px) {
    h1 {
        font-size: 1.3rem;
    }
    #video {
        max-height: 35vh;
    }
    button {
        padding: 5px 10px;
        font-size: 0.7rem;
        min-width: 60px;
    }
    .stat-value {
        font-size: 1rem;
    }
    .stat-label {
        font-size: 0.6rem;
    }
    #countdown {
        font-size: 2rem;
    }
    #status {
        font-size: 0.8rem;
    }
}


/* Landscape mode for mobile */

@media (orientation: landscape) and (max-height: 500px) {
    body:not(.fullscreen) {
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        align-items: flex-start;
    }
    body:not(.fullscreen) h1 {
        width: 100%;
        text-align: center;
        margin-bottom: 5px;
        font-size: 1.2rem;
    }
    body:not(.fullscreen) #container {
        width: 60%;
        max-width: none;
    }
    body:not(.fullscreen) #video {
        max-height: 70vh;
    }
    body:not(.fullscreen) #stats {
        width: 35%;
        margin: 0;
        grid-template-columns: 1fr;
    }
    body:not(.fullscreen) #controls {
        width: 35%;
        flex-direction: column;
        margin: 10px 0;
    }
    body:not(.fullscreen) #settings {
        width: 100%;
        margin-top: 10px;
    }
}

</style></head><body><h1>🔥 Enhanced Push-Up Tracker 🔥</h1><div id="container"><video id="video" width="640" height="480" autoplay muted playsinline></video><canvas id="output" width="640" height="480"></canvas><button id="fullscreenBtn" title="Toggle Fullscreen">⛶</button></div><button class="mobile-toggle" id="mobileToggle">☰</button><div class="mobile-info">Tap ☰ untuk kontrol</div><div id="controls"><button id="startBtn">🚀 Mulai</button><button id="pauseBtn">⏸️ Pause</button><button id="resetBtn">🔄 Reset</button></div><div id="countdown"></div><div id="status">Siap untuk memulai!</div><div id="stats"><div class="stat-card"><div class="stat-label">Total Push-Up</div><div class="stat-value" id="counter">0</div></div><div class="stat-card"><div class="stat-label">Waktu</div><div class="stat-value" id="timer">00:00</div></div><div class="stat-card"><div class="stat-label">Push-Up/Menit</div><div class="stat-value" id="rate">0</div></div><div class="stat-card"><div class="stat-label">Akurasi Postur</div><div class="stat-value" id="posture">0%</div></div></div><div class="quality-indicator"><span>Kualitas:</span><div class="quality-bar"><div class="quality-fill" id="qualityFill"></div></div><span id="qualityText">Baik</span></div><div id="settings"><h3>⚙️ Pengaturan</h3><div class="setting-group"><label for="minAngle">Sudut Minimum (Posisi Bawah):</label><input type="range" id="minAngle" min="70" max="100" value="90"><input type="number" id="minAngleValue" min="70" max="100" value="90">° </div><div class="setting-group"><label for="maxAngle">Sudut Maximum (Posisi Atas):</label><input type="range" id="maxAngle" min="150" max="180" value="160"><input type="number" id="maxAngleValue" min="150" max="180" value="160">° </div><div class="setting-group"><label for="countdownTime">Waktu Countdown (detik):</label><input type="range" id="countdownTime" min="3" max="10" value="5"><input type="number" id="countdownTimeValue" min="3" max="10" value="5"></div></div><script> // State variables
let pushUpCount=0;
let stage="up";
let trackingActive=false;
let isPaused=false;
let startTime=null;
let elapsedTime=0;
let pausedTime=0;
let lastPushUpTime=0;
let postureQuality=0;
let qualityHistory=[];
let achievements=[];
let isFullscreen=false;
// Settings
let minAngle=90;
let maxAngle=160;
let countdownDuration=5;
// DOM elements
const videoElement=document.getElementById('video');
const canvasElement=document.getElementById('output');
const canvasCtx=canvasElement.getContext('2d');
const counterDiv=document.getElementById("counter");
const timerDiv=document.getElementById("timer");
const rateDiv=document.getElementById("rate");
const postureDiv=document.getElementById("posture");
const countdownDiv=document.getElementById("countdown");
const statusDiv=document.getElementById("status");
const qualityFill=document.getElementById("qualityFill");
const qualityText=document.getElementById("qualityText");
const startBtn=document.getElementById("startBtn");
const pauseBtn=document.getElementById("pauseBtn");
const resetBtn=document.getElementById("resetBtn");
const fullscreenBtn=document.getElementById("fullscreenBtn");
const mobileToggle=document.getElementById("mobileToggle");
const minAngleSlider=document.getElementById("minAngle");
const maxAngleSlider=document.getElementById("maxAngle");
const countdownSlider=document.getElementById("countdownTime");
const minAngleValue=document.getElementById("minAngleValue");
const maxAngleValue=document.getElementById("maxAngleValue");
const countdownTimeValue=document.getElementById("countdownTimeValue");
// Fullscreen functionality
fullscreenBtn.addEventListener('click', toggleFullscreen);
mobileToggle.addEventListener('click', toggleMobileControls);
function toggleFullscreen() {
    isFullscreen=!isFullscreen;
    if (isFullscreen) {
        document.body.classList.add('fullscreen');
        fullscreenBtn.innerHTML='🗗';
        fullscreenBtn.title='Exit Fullscreen';
        // Lock orientation to landscape on mobile
        if (screen.orientation && screen.orientation.lock) {
            screen.orientation.lock('landscape').catch(()=> {}
            );
        }
    }
    else {
        document.body.classList.remove('fullscreen');
        fullscreenBtn.innerHTML='⛶';
        fullscreenBtn.title='Toggle Fullscreen';
        // Unlock orientation
        if (screen.orientation && screen.orientation.unlock) {
            screen.orientation.unlock();
        }
    }
}

function toggleMobileControls() {
    const controls=document.getElementById('controls');
    const settings=document.getElementById('settings');
    const stats=document.getElementById('stats');
    const qualityIndicator=document.querySelector('.quality-indicator');
    if (controls.style.display==='none') {
        controls.style.display='flex';
        settings.style.display='block';
        stats.style.display='grid';
        qualityIndicator.style.display='flex';
        mobileToggle.innerHTML='✕';
    }
    else {
        controls.style.display='none';
        settings.style.display='none';
        stats.style.display='none';
        qualityIndicator.style.display='none';
        mobileToggle.innerHTML='☰';
    }
}

// Settings sync
minAngleSlider.addEventListener('input', (e)=> {
    minAngle=parseInt(e.target.value);
    minAngleValue.value=minAngle;
}

);
maxAngleSlider.addEventListener('input', (e)=> {
    maxAngle=parseInt(e.target.value);
    maxAngleValue.value=maxAngle;
}

);
countdownSlider.addEventListener('input', (e)=> {
    countdownDuration=parseInt(e.target.value);
    countdownTimeValue.value=countdownDuration;
}

);
minAngleValue.addEventListener('input', (e)=> {
    minAngle=parseInt(e.target.value);
    minAngleSlider.value=minAngle;
}

);
maxAngleValue.addEventListener('input', (e)=> {
    maxAngle=parseInt(e.target.value);
    maxAngleSlider.value=maxAngle;
}

);
countdownTimeValue.addEventListener('input', (e)=> {
    countdownDuration=parseInt(e.target.value);
    countdownSlider.value=countdownDuration;
}

);
// Achievement system
function checkAchievements() {
    const milestones=[5,
    10,
    25,
    50,
    100];
    milestones.forEach(milestone=> {
        if (pushUpCount===milestone && !achievements.includes(milestone)) {
            achievements.push(milestone);
            showAchievement(`🎉 Selamat! $ {
                milestone
            }
            Push-Up tercapai!`);
        }
    }
    );
}

function showAchievement(message) {
    const achievement=document.createElement('div');
    achievement.className='achievement';
    achievement.textContent=message;
    document.body.appendChild(achievement);
    setTimeout(()=> achievement.classList.add('show'), 100);
    setTimeout(()=> {
        achievement.classList.remove('show');
        setTimeout(()=> document.body.removeChild(achievement), 300);
    }
    , 3000);
}

// Timer functions
function updateTimer() {
    if (!trackingActive || isPaused) return;
    const now=Date.now();
    elapsedTime=now - startTime - pausedTime;
    const seconds=Math.floor(elapsedTime / 1000);
    const minutes=Math.floor(seconds / 60);
    const remainingSeconds=seconds % 60;
    timerDiv.textContent=`$ {
        minutes.toString().padStart(2, '0')
    }
    :$ {
        remainingSeconds.toString().padStart(2, '0')
    }
    `;
    // Update rate
    if (elapsedTime > 0) {
        const rate=Math.round((pushUpCount / elapsedTime) * 60000);
        rateDiv.textContent=rate;
    }
}

// Start button handler
startBtn.addEventListener("click", ()=> {
    if (trackingActive) return;
    let countdown=countdownDuration;
    countdownDiv.textContent=countdown;
    statusDiv.textContent="Bersiap-siap...";
    startBtn.disabled=true;
    const interval=setInterval(()=> {
        countdown--;
        if (countdown > 0) {
            countdownDiv.textContent=countdown;
        }
        else {
            clearInterval(interval);
            countdownDiv.textContent="";
            statusDiv.textContent="Mulai Push-Up!";
            trackingActive=true;
            startTime=Date.now();
            pausedTime=0;
            startBtn.disabled=false;
            startBtn.textContent="🏃 Berjalan";
        }
    }
    , 1000);
}

);
// Pause button handler
pauseBtn.addEventListener("click", ()=> {
    if (!trackingActive) return;
    isPaused=!isPaused;
    if (isPaused) {
        pauseBtn.textContent="▶️ Lanjut";
        statusDiv.textContent="Dijeda";
        lastPauseTime=Date.now();
    }
    else {
        pauseBtn.textContent="⏸️ Pause";
        statusDiv.textContent="Lanjutkan Push-Up!";
        pausedTime +=Date.now() - lastPauseTime;
    }
}

);
// Reset button handler
resetBtn.addEventListener("click", ()=> {
    pushUpCount=0;
    stage="up";
    trackingActive=false;
    isPaused=false;
    elapsedTime=0;
    pausedTime=0;
    postureQuality=0;
    qualityHistory=[];
    counterDiv.textContent="0";
    timerDiv.textContent="00:00";
    rateDiv.textContent="0";
    postureDiv.textContent="0%";
    countdownDiv.textContent="";
    statusDiv.textContent="Siap untuk memulai!";
    startBtn.textContent="🚀 Mulai";
    pauseBtn.textContent="⏸️ Pause";
    startBtn.disabled=false;
    updateQualityIndicator(0);
}

);
// Angle calculation with improved accuracy
function getAngle(a, b, c) {
    const ab=[a.x - b.x,
    a.y - b.y];
    const cb=[c.x - b.x,
    c.y - b.y];
    const dot=ab[0] * cb[0]+ab[1] * cb[1];
    const magAB=Math.sqrt(ab[0] ** 2 + ab[1] ** 2);
    const magCB=Math.sqrt(cb[0] ** 2 + cb[1] ** 2);
    if (magAB===0 || magCB===0) return 0;
    const cosAngle=Math.max(-1, Math.min(1, dot / (magAB * magCB)));
    const angle=Math.acos(cosAngle);
    return angle * (180 / Math.PI);
}

// Posture quality assessment
function assessPosture(landmarks) {
    let score=0;
    const checks=[];
    // Check body alignment
    const leftShoulder=landmarks[11];
    const rightShoulder=landmarks[12];
    const leftHip=landmarks[23];
    const rightHip=landmarks[24];
    // Shoulder-hip alignment
    const shoulderCenter= {
        x: (leftShoulder.x + rightShoulder.x) / 2, y: (leftShoulder.y + rightShoulder.y) / 2
    }
    ;
    const hipCenter= {
        x: (leftHip.x + rightHip.x) / 2, y: (leftHip.y + rightHip.y) / 2
    }
    ;
    // Check if body is relatively straight
    const bodyAngle=Math.abs(shoulderCenter.y - hipCenter.y);
    if (bodyAngle < 0.05) {
        score+=25;
        checks.push("Body alignment: Good");
    }
    else {
        checks.push("Body alignment: Needs improvement");
    }
    // Check shoulder stability
    const shoulderWidth=Math.abs(leftShoulder.x - rightShoulder.x);
    if (shoulderWidth > 0.1) {
        score+=25;
        checks.push("Shoulder stability: Good");
    }
    else {
        checks.push("Shoulder stability: Too narrow");
    }
    // Check if hands are properly positioned
    const leftWrist=landmarks[15];
    const rightWrist=landmarks[16];
    const handSpread=Math.abs(leftWrist.x - rightWrist.x);
    if (handSpread > 0.15 && handSpread < 0.4) {
        score+=25;
        checks.push("Hand position: Good");
    }
    else {
        checks.push("Hand position: Adjust width");
    }
    // Check head position
    const nose=landmarks[0];
    const neckY=(leftShoulder.y + rightShoulder.y) / 2;
    if (Math.abs(nose.y - neckY) < 0.08) {
        score+=25;
        checks.push("Head position: Good");
    }
    else {
        checks.push("Head position: Keep neutral");
    }
    return {
        score,
        checks
    }
    ;
}

// Update quality indicator
function updateQualityIndicator(quality) {
    qualityFill.style.width=`$ {
        quality
    }
    %`;
    let text="Buruk";
    if (quality >=80) text="Sangat Baik";
    else if (quality >=60) text="Baik";
    else if (quality >=40) text="Cukup";
    qualityText.textContent=text;
}

// Initialize MediaPipe Pose
const pose=new Pose( {
    locateFile: (file)=> {
        return `https: //cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;
    }
}

);
pose.setOptions( {
    modelComplexity: 1, smoothLandmarks: true, enableSegmentation: false, smoothSegmentation: true, minDetectionConfidence: 0.5, minTrackingConfidence: 0.5
}

);
pose.onResults(onResults);
// Process pose results
function onResults(results) {
    if (!results.poseLandmarks) return;
    // Clear canvas
    canvasCtx.save();
    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
    // Draw video feed
    canvasCtx.globalCompositeOperation='source-over';
    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);
    // Draw pose landmarks
    if (results.poseLandmarks) {
        // Draw connections
        drawConnectors(canvasCtx, results.poseLandmarks, POSE_CONNECTIONS, {
            color: '#00FF00', lineWidth: 2
        }
        );
        // Draw landmarks
        drawLandmarks(canvasCtx, results.poseLandmarks, {
            color: '#FF0000', lineWidth: 1, radius: 2
        }
        );
        // Push-up tracking logic
        if (trackingActive && !isPaused) {
            const landmarks=results.poseLandmarks;
            // Calculate elbow angle (using left elbow as reference)
            const leftShoulder=landmarks[11];
            const leftElbow=landmarks[13];
            const leftWrist=landmarks[15];
            const angle=getAngle(leftShoulder, leftElbow, leftWrist);
            // Assess posture quality
            const posture=assessPosture(landmarks);
            qualityHistory.push(posture.score);
            // Keep only last 10 readings for average
            if (qualityHistory.length > 10) {
                qualityHistory.shift();
            }
            const avgQuality=qualityHistory.reduce((a, b)=> a + b, 0) / qualityHistory.length;
            updateQualityIndicator(avgQuality);
            postureDiv.textContent=`$ {
                Math.round(avgQuality)
            }
            %`;
            // Push-up detection logic
            if (stage==="up" && angle < minAngle) {
                stage="down";
                statusDiv.textContent="Posisi Bawah";
            }
            if (stage==="down" && angle > maxAngle) {
                stage="up";
                pushUpCount++;
                counterDiv.textContent=pushUpCount;
                statusDiv.textContent="Push-Up Selesai!";
                lastPushUpTime=Date.now();
                // Check achievements
                checkAchievements();
                // Show brief success indicator
                setTimeout(()=> {
                    if (trackingActive && !isPaused) {
                        statusDiv.textContent="Lanjutkan Push-Up!";
                    }
                }
                , 500);
            }
            // Draw angle indicator
            canvasCtx.fillStyle='#FFFFFF';
            canvasCtx.font='20px Arial';
            canvasCtx.fillText(`Angle: $ {
                Math.round(angle)
            }
            °`, 10, 30);
            // Draw stage indicator
            canvasCtx.fillStyle=stage==="up" ? '#00FF00': '#FF6600';
            canvasCtx.fillText(`Stage: $ {
                stage.toUpperCase()
            }
            `, 10, 60);
            // Draw quality indicator on canvas
            canvasCtx.fillStyle='#FFFFFF';
            canvasCtx.fillText(`Quality: $ {
                Math.round(avgQuality)
            }
            %`, 10, 90);
        }
    }
    canvasCtx.restore();
    // Update timer
    updateTimer();
}

// Initialize camera
const camera=new Camera(videoElement, {
    onFrame: async()=> {
        await pose.send( {
            image: videoElement
        }
        );
    }
    , width: 640, height: 480
}

);
// Start camera
camera.start().catch(error=> {
    console.error('Error starting camera:', error);
    statusDiv.textContent="Error: Tidak dapat mengakses kamera";
}

);
// Handle visibility change (pause when tab is not active)
document.addEventListener('visibilitychange', ()=> {
    if (document.hidden && trackingActive && !isPaused) {
        pauseBtn.click();
    }
}

);
// Handle device orientation change
window.addEventListener('orientationchange', ()=> {
    setTimeout(()=> {
        // Resize canvas to match video dimensions
        const rect=videoElement.getBoundingClientRect();
        canvasElement.width=rect.width;
        canvasElement.height=rect.height;
    }
    , 100);
}

);
// Initialize UI
updateQualityIndicator(0);
// Keyboard shortcuts
document.addEventListener('keydown', (e)=> {
    if (e.code==='Space') {
        e.preventDefault();
        if (!trackingActive) {
            startBtn.click();
        }
        else {
            pauseBtn.click();
        }
    }
    else if (e.code==='KeyR') {
        e.preventDefault();
        resetBtn.click();
    }
    else if (e.code==='KeyF') {
        e.preventDefault();
        fullscreenBtn.click();
    }
}

);
// Touch gestures for mobile
let touchStartX=0;
let touchStartY=0;
videoElement.addEventListener('touchstart', (e)=> {
    touchStartX=e.touches[0].clientX;
    touchStartY=e.touches[0].clientY;
}

);
videoElement.addEventListener('touchend', (e)=> {
    const touchEndX=e.changedTouches[0].clientX;
    const touchEndY=e.changedTouches[0].clientY;
    const deltaX=touchEndX - touchStartX;
    const deltaY=touchEndY - touchStartY;
    // Swipe gestures
    if (Math.abs(deltaX) > Math.abs(deltaY)) {
        if (deltaX > 50) {
            // Swipe right - start/pause
            if (!trackingActive) {
                startBtn.click();
            }
            else {
                pauseBtn.click();
            }
        }
        else if (deltaX < -50) {
            // Swipe left - reset
            resetBtn.click();
        }
    }
    else {
        if (deltaY < -50) {
            // Swipe up - fullscreen
            fullscreenBtn.click();
        }
    }
}

);
// Prevent zoom on double tap
let lastTouchEnd=0;
videoElement.addEventListener('touchend', (e)=> {
    const now=(new Date()).getTime();
    if (now - lastTouchEnd <=300) {
        e.preventDefault();
    }
    lastTouchEnd=now;
}

, false);
// Performance monitoring
let frameCount=0;
let lastFrameTime=Date.now();
function monitorPerformance() {
    frameCount++;
    const now=Date.now();
    if (now - lastFrameTime >=1000) {
        const fps=frameCount;
        frameCount=0;
        lastFrameTime=now;
        // Adjust quality based on performance
        if (fps < 15) {
            // Lower quality for better performance
            pose.setOptions( {
                modelComplexity: 0, smoothLandmarks: false
            }
            );
        }
        else if (fps > 25) {
            // Higher quality if performance allows
            pose.setOptions( {
                modelComplexity: 1, smoothLandmarks: true
            }
            );
        }
    }
    requestAnimationFrame(monitorPerformance);
}

monitorPerformance();
// Save session data to localStorage (if available)
function saveSession() {
    const sessionData= {
        totalPushUps: pushUpCount, timeElapsed: elapsedTime, date: new Date().toISOString(), achievements: achievements
    }
    ;
    try {
        const sessions=JSON.parse(localStorage.getItem('pushUpSessions') || '[]');
        sessions.push(sessionData);
        localStorage.setItem('pushUpSessions', JSON.stringify(sessions));
    }
    catch (e) {
        console.log('LocalStorage not available');
    }
}

// Auto-save session on reset or when tracking stops
window.addEventListener('beforeunload', ()=> {
    if (pushUpCount > 0) {
        saveSession();
    }
}

);
// Enhanced error handling
window.addEventListener('error', (e)=> {
    console.error('Application error:', e);
    statusDiv.textContent="Error: Aplikasi mengalami masalah";
}

);
// Service worker for offline functionality (if needed)
if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js').catch(err=> {
        console.log('Service worker registration failed:', err);
    }
    );
}

console.log('🔥 Enhanced Push-Up Tracker initialized successfully!');
console.log('Shortcuts: Space=Start/Pause, R=Reset, F=Fullscreen');
console.log('Touch gestures: Swipe right=Start/Pause, Swipe left=Reset, Swipe up=Fullscreen');
</script></body></html>